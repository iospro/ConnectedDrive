//
//  VehicleErrors.swift
//  i3Trip
//
//  Created by Ronald Mannak on 12/15/15.
//  Copyright Â© 2015 Ronald Mannak. All rights reserved.


import Foundation

public enum VehicleError: Int {
    
    case authenticationFailed               = -8000
    case notLoggedIn                        = -8001
    case noUsernamePasswordStored           = -8002
    case vehicleNotFound                    = -8003
    
    func failureReason() -> String {
        switch self {
        case .authenticationFailed:
            return "Authentication Failed"
        case .notLoggedIn:
            return "Not Logged In"
        case .noUsernamePasswordStored:
            return "No Username or Password Stored on Device"
        case .vehicleNotFound:
            return "Vehicle Not Found"
        }
    }
    
    func domain() -> String {
        return "ConnectedDriveError"
    }
    
    func errorCode() -> Int {
        return rawValue
    }
    
    func error(userInfo: [NSObject: AnyObject]? = nil) -> NSError {
        return NSError(domain: domain(), code: errorCode(), userInfo: userInfo)
    }
}

/*
public struct VehicleError {

    /// The domain used for creating all iRemote errors.
    public static let Domain = "com.connecteddrive.error"
    
    /// The custom error codes generated by iRemote.
    public enum Code: Int {
        case authenticationFailed               = -8000
        case notLoggedIn                        = -8001
        case noUsernamePasswordStored           = -8002
        case vehicleNotFound                    = -8003
    }
    
    /**
     Creates an `NSError` with the given error code and failure reason.
     
     - parameter code:          The error code.
     - parameter failureReason: The failure reason.
     
     - returns: An `NSError` with the given error code and failure reason.
     */
    public static func error(_ code: Code, failureReason: String) -> NSError {
        return error(code: code.rawValue, failureReason: failureReason)
    }
    
    /**
     Creates an `NSError` with the given error code and failure reason.
     
     - parameter code:          The error code.
     - parameter failureReason: The failure reason.
     
     - returns: An `NSError` with the given error code and failure reason.
     */
    public static func error(_ code: Int, failureReason: String) -> NSError {
        let userInfo = [NSLocalizedFailureReasonErrorKey: failureReason]
        return NSError(domain: Domain, code: code, userInfo: userInfo)
    }
}

*/
